This project is a collection of Objective-C Classes
that come in handy for Haskell programmers

... and other programmers with a functional background.
For procedural programmers they should also be an enrichment
as you can save writing unnecessary code. If you like the ideas here
please have a look at a functional language as doing so will shurely
enlighten your view on programming.

A last word on this project: You are welcome to get involved or
give feedback of any kind. You can use the mail form at
http://n-mayr.de/ . Put "objc4hs" in the "Betreff" (=Subject) for
extra speedy responses.

Lets dive right in.

The Class extenstions 'OHMapZipCategories' contains some friends of the
"makeObjectsPerformSelector:"-Method that Apple failed to put in.
People already familiar with the 'map', 'zip' and 'zipWith' functions will
know what these methods do and find the right type for their needs.

You should be able to write much less loops by hand. But beware that
the compiler does not check if a selector can be performed on any object.
If you misspell a name you will encounter the problem at runtime.
Fortunately this kind of error is easy to fix as the debug message will tell
you exactly where the problem lies.

Here are some examples:

(1) NSArray *results = [someArray mapSel:@selector(someSelector)];
(2) NSArray *results = [someArray mapSel:@selector(someSelector)
                                     obj:someObject];

(3) NSArray *results = [someObject mapSel:@selector(someSelector)
                                      arr:someArray;

(4) NSArray *zippedArrays = [someArray zip:anotherArray];

(5) NSArray *zippedArrays = [someArray zipWith:@selector(someSelector
                                           arr:anotherArray];

Method (1) does indeed differ form "makeObjectsPerformSelector:". It does
not only perform the selector it also collects the results and returns
it as an NSArray.

(2) As you might have guessed, there is also a correspondent for
"makeObjectsPerformSelector:withObjects:".

There are also methods (3) that work on one object and performs one of its
selectors with an array of objects.

(4) "zip:" will create an OHTupel which is just an Object representing a
Tuple. The new NSArray has the length of the shorter of the given arrays.

(5) "zipWith:" will call the selector on an object of the first array with
the corresponding object of the second array. The results are returned.

All Methods exist in a variant that returns (void) - if you are just
interested in the side effects.

So have more FUN with Objective-C!
